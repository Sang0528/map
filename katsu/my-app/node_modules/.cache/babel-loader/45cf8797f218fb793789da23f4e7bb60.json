{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar _utils = require(\"./utils\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BaseMode = /*#__PURE__*/function () {\n  function BaseMode() {\n    _classCallCheck(this, BaseMode);\n\n    _defineProperty(this, \"_tentativeFeature\", void 0);\n\n    _defineProperty(this, \"_editHandles\", void 0);\n\n    this._tentativeFeature = null;\n    this._editHandles = null;\n  }\n\n  _createClass(BaseMode, [{\n    key: \"handlePan\",\n    value: function handlePan(event, props) {}\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {}\n  }, {\n    key: \"handleDblClick\",\n    value: function handleDblClick(event, props) {}\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {}\n  }, {\n    key: \"handleStartDragging\",\n    value: function handleStartDragging(event, props) {}\n  }, {\n    key: \"handleStopDragging\",\n    value: function handleStopDragging(event, props) {}\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, props) {}\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      return null;\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      return [];\n    }\n  }, {\n    key: \"handleDragging\",\n    value: function handleDragging(event, props) {}\n  }, {\n    key: \"getTentativeFeature\",\n    value: function getTentativeFeature() {\n      return this._tentativeFeature;\n    }\n  }, {\n    key: \"getEditHandles\",\n    value: function getEditHandles() {\n      return this._editHandles;\n    }\n  }, {\n    key: \"setTentativeFeature\",\n    value: function setTentativeFeature(feature) {\n      this._tentativeFeature = feature;\n    }\n  }, {\n    key: \"getEditHandlesFromFeature\",\n    value: function getEditHandlesFromFeature(feature, featureIndex) {\n      var coordinates = (0, _utils.getFeatureCoordinates)(feature);\n\n      if (!coordinates) {\n        return null;\n      } // @ts-ignore\n\n\n      return coordinates.map(function (coord, i) {\n        return {\n          type: 'Feature',\n          properties: {\n            // TODO deprecate renderType\n            renderType: feature.properties.renderType,\n            guideType: _constants.GUIDE_TYPE.EDIT_HANDLE,\n            editHandleType: 'existing',\n            featureIndex: featureIndex,\n            positionIndexes: [i]\n          },\n          geometry: {\n            type: _constants.GEOJSON_TYPE.POINT,\n            coordinates: coord\n          }\n        };\n      });\n    }\n  }, {\n    key: \"getSelectedFeature\",\n    value: function getSelectedFeature(props, featureIndex) {\n      var data = props.data,\n          selectedIndexes = props.selectedIndexes; // @ts-ignore\n\n      var features = data && data.features;\n      var selectedIndex = (0, _utils.isNumeric)(featureIndex) ? Number(featureIndex) : selectedIndexes && selectedIndexes[0];\n      return features && features[selectedIndex];\n    }\n  }]);\n\n  return BaseMode;\n}();\n\nexports[\"default\"] = BaseMode;","map":{"version":3,"sources":["../../src/edit-modes/base-mode.ts"],"names":["BaseMode","event","props","feature","featureIndex","coordinates","type","properties","renderType","guideType","GUIDE_TYPE","editHandleType","positionIndexes","geometry","GEOJSON_TYPE","coord","data","selectedIndexes","features","selectedIndex","Number"],"mappings":";;;;;;;AAcA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,Q;AAInB,WAAA,QAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AACZ,SAAA,iBAAA,GAAA,IAAA;AACA,SAAA,YAAA,GAAA,IAAA;AACD;;;;8BAESC,K,EAAmBC,K,EAAqC,CAAE;;;gCAExDD,K,EAAmBC,K,EAAqC,CAAE;;;mCAEvDD,K,EAAmBC,K,EAAqC,CAAE;;;sCAEvDD,K,EAAyBC,K,EAAqC,CAAE;;;wCAE9DD,K,EAA2BC,K,EAAqC,CAAE;;;uCAEnED,K,EAA0BC,K,EAAqC,CAAE;;;gCAExED,K,EAAsBC,K,EAA2C,CAAE;;;8BAErEA,K,EAAgF;AACxF,aAAA,IAAA;AACD;;;gCACWA,K,EAAgD;AAC1D,aAAA,EAAA;AACD;;;mCACcD,K,EAAsBC,K,EAA2C,CAAE;;;0CAE5D;AACpB,aAAO,KAAP,iBAAA;AACD;;;qCAEgB;AACf,aAAO,KAAP,YAAA;AACD;;;wCAEmBC,O,EAAkB;AACpC,WAAA,iBAAA,GAAA,OAAA;AACD;;;8CAEyBA,O,EAAkBC,Y,EAAyC;AACnF,UAAMC,WAAW,GAAG,CAAA,GAAA,MAAA,CAAA,qBAAA,EAApB,OAAoB,CAApB;;AACA,UAAI,CAAJ,WAAA,EAAkB;AAChB,eAAA,IAAA;AAHiF,OAAA,CAKnF;;;AACA,aAAO,WAAW,CAAX,GAAA,CAAgB,UAAA,KAAA,EAAA,CAAA,EAAc;AACnC,eAAO;AACLC,UAAAA,IAAI,EADC,SAAA;AAELC,UAAAA,UAAU,EAAE;AACV;AACAC,YAAAA,UAAU,EAAEL,OAAO,CAAPA,UAAAA,CAFF,UAAA;AAGVM,YAAAA,SAAS,EAAEC,UAAAA,CAAAA,UAAAA,CAHD,WAAA;AAIVC,YAAAA,cAAc,EAJJ,UAAA;AAKVP,YAAAA,YAAY,EALF,YAAA;AAMVQ,YAAAA,eAAe,EAAE,CAAA,CAAA;AANP,WAFP;AAULC,UAAAA,QAAQ,EAAE;AACRP,YAAAA,IAAI,EAAEQ,UAAAA,CAAAA,YAAAA,CADE,KAAA;AAERT,YAAAA,WAAW,EAAEU;AAFL;AAVL,SAAP;AADF,OAAO,CAAP;AAiBD;;;uCAEkBb,K,EAAqCE,Y,EAAyC;AAAA,UACvFY,IADuF,GAC7Dd,KAD6D,CAAA,IAAA;AAAA,UACjFe,eADiF,GAC7Df,KAD6D,CAAA,eAAA,CAAA,CAE/F;;AACA,UAAMgB,QAAQ,GAAGF,IAAI,IAAIA,IAAI,CAA7B,QAAA;AAEA,UAAMG,aAAa,GAAG,CAAA,GAAA,MAAA,CAAA,SAAA,EAAA,YAAA,IAClBC,MAAM,CADY,YACZ,CADY,GAElBH,eAAe,IAAIA,eAAe,CAFtC,CAEsC,CAFtC;AAIA,aAAOC,QAAQ,IAAIA,QAAQ,CAA3B,aAA2B,CAA3B;AACD","sourcesContent":["import {\n  EditMode,\n  GuideFeatureCollection,\n  Feature,\n  ClickEvent,\n  PointerMoveEvent,\n  StartDraggingEvent,\n  StopDraggingEvent,\n  FeatureCollection,\n  Tooltip,\n  DraggingEvent,\n} from '@nebula.gl/edit-modes';\nimport { ModeProps } from '../types';\n\nimport { GEOJSON_TYPE, GUIDE_TYPE } from '../constants';\nimport { getFeatureCoordinates, isNumeric } from './utils';\n\nexport default class BaseMode implements EditMode<FeatureCollection, GuideFeatureCollection> {\n  _tentativeFeature: Feature | null | undefined;\n  _editHandles: Feature[] | null | undefined;\n\n  constructor() {\n    this._tentativeFeature = null;\n    this._editHandles = null;\n  }\n\n  handlePan(event: ClickEvent, props: ModeProps<FeatureCollection>) {}\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {}\n\n  handleDblClick(event: ClickEvent, props: ModeProps<FeatureCollection>) {}\n\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>) {}\n\n  handleStartDragging(event: StartDraggingEvent, props: ModeProps<FeatureCollection>) {}\n\n  handleStopDragging(event: StopDraggingEvent, props: ModeProps<FeatureCollection>) {}\n\n  handleKeyUp(event: KeyboardEvent, props: ModeProps<FeatureCollection>): void {}\n\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection | null | undefined {\n    return null;\n  }\n  getTooltips(props: ModeProps<FeatureCollection>): Tooltip[] {\n    return [];\n  }\n  handleDragging(event: DraggingEvent, props: ModeProps<FeatureCollection>): void {}\n\n  getTentativeFeature() {\n    return this._tentativeFeature;\n  }\n\n  getEditHandles() {\n    return this._editHandles;\n  }\n\n  setTentativeFeature(feature: Feature) {\n    this._tentativeFeature = feature;\n  }\n\n  getEditHandlesFromFeature(feature: Feature, featureIndex: number | null | undefined) {\n    const coordinates = getFeatureCoordinates(feature);\n    if (!coordinates) {\n      return null;\n    }\n    // @ts-ignore\n    return coordinates.map((coord, i) => {\n      return {\n        type: 'Feature',\n        properties: {\n          // TODO deprecate renderType\n          renderType: feature.properties.renderType,\n          guideType: GUIDE_TYPE.EDIT_HANDLE,\n          editHandleType: 'existing',\n          featureIndex,\n          positionIndexes: [i],\n        },\n        geometry: {\n          type: GEOJSON_TYPE.POINT,\n          coordinates: coord,\n        },\n      };\n    });\n  }\n\n  getSelectedFeature(props: ModeProps<FeatureCollection>, featureIndex: number | null | undefined) {\n    const { data, selectedIndexes } = props;\n    // @ts-ignore\n    const features = data && data.features;\n\n    const selectedIndex = isNumeric(featureIndex)\n      ? Number(featureIndex)\n      : selectedIndexes && selectedIndexes[0];\n\n    return features && features[selectedIndex];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}