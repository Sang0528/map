{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _constants = require(\"./constants\");\n\nvar _modeHandler = _interopRequireDefault(require(\"./mode-handler\"));\n\nvar _utils = require(\"./edit-modes/utils\");\n\nvar _style = require(\"./style\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defaultProps = _objectSpread({}, _modeHandler[\"default\"].defaultProps, {\n  clickRadius: 0,\n  featureShape: 'circle',\n  editHandleShape: 'rect',\n  editHandleStyle: _style.editHandleStyle,\n  featureStyle: _style.featureStyle,\n  featuresDraggable: true\n});\n\nvar Editor = /*#__PURE__*/function (_ModeHandler) {\n  _inherits(Editor, _ModeHandler);\n\n  var _super = _createSuper(Editor);\n\n  function Editor() {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_getEditHandleState\", function (editHandle, renderState) {\n      var _this$state = _this.state,\n          pointerDownPicks = _this$state.pointerDownPicks,\n          hovered = _this$state.hovered;\n\n      if (renderState) {\n        return renderState;\n      }\n\n      var editHandleIndex = editHandle.properties.positionIndexes[0];\n      var draggingEditHandleIndex = null;\n      var pickedObject = pointerDownPicks && pointerDownPicks[0] && pointerDownPicks[0].object;\n\n      if (pickedObject && pickedObject.guideType === _constants.GUIDE_TYPE.EDIT_HANDLE) {\n        draggingEditHandleIndex = pickedObject.index;\n      }\n\n      if (editHandleIndex === draggingEditHandleIndex || _this.state.selectedEditHandleIndexes.includes(editHandleIndex)) {\n        return _constants.RENDER_STATE.SELECTED;\n      } // @ts-ignore\n\n\n      if (hovered && hovered.type === _constants.ELEMENT_TYPE.EDIT_HANDLE) {\n        if (hovered.index === editHandleIndex) {\n          return _constants.RENDER_STATE.HOVERED;\n        } // cursor hovered on first vertex when drawing polygon\n\n\n        if (hovered.index === 0 && editHandle.properties.guideType === _constants.GUIDE_TYPE.CURSOR_EDIT_HANDLE) {\n          return _constants.RENDER_STATE.CLOSING;\n        }\n      }\n\n      return _constants.RENDER_STATE.INACTIVE;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getFeatureRenderState\", function (index, renderState) {\n      var hovered = _this.state.hovered;\n\n      var selectedFeatureIndex = _this._getSelectedFeatureIndex();\n\n      if (renderState) {\n        return renderState;\n      }\n\n      if (index === selectedFeatureIndex) {\n        return _constants.RENDER_STATE.SELECTED;\n      } // @ts-ignore\n\n\n      if (hovered && hovered.type === _constants.ELEMENT_TYPE.FEATURE && hovered.featureIndex === index) {\n        return _constants.RENDER_STATE.HOVERED;\n      }\n\n      return _constants.RENDER_STATE.INACTIVE;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getStyleProp\", function (styleProp, params) {\n      return typeof styleProp === 'function' ? styleProp(params) : styleProp;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderEditHandle\", function (editHandle, feature) {\n      /* eslint-enable max-params */\n      var coordinates = (0, _utils.getFeatureCoordinates)(editHandle);\n\n      var p = _this.project(coordinates && coordinates[0]);\n\n      if (!p) {\n        return null;\n      }\n\n      var _editHandle$propertie = editHandle.properties,\n          featureIndex = _editHandle$propertie.featureIndex,\n          positionIndexes = _editHandle$propertie.positionIndexes,\n          editHandleType = _editHandle$propertie.editHandleType;\n      var _this$props = _this.props,\n          clickRadius = _this$props.clickRadius,\n          editHandleShape = _this$props.editHandleShape,\n          editHandleStyle = _this$props.editHandleStyle;\n      var index = positionIndexes.length > 1 ? positionIndexes[1] : positionIndexes[0];\n\n      var shape = _this._getStyleProp(editHandleShape, {\n        feature: feature || editHandle,\n        index: index,\n        featureIndex: featureIndex,\n        // @ts-ignore\n        state: _this._getEditHandleState(editHandle)\n      });\n\n      var style = _this._getStyleProp(editHandleStyle, {\n        feature: feature || editHandle,\n        index: index,\n        featureIndex: featureIndex,\n        shape: shape,\n        // @ts-ignore\n        state: _this._getEditHandleState(editHandle)\n      }); // disable events for cursor editHandle\n\n\n      if (editHandle.properties.guideType === _constants.GUIDE_TYPE.CURSOR_EDIT_HANDLE) {\n        style = _objectSpread({}, style, {\n          // disable pointer events for cursor\n          pointerEvents: 'none'\n        });\n      }\n\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.EDIT_HANDLE, \".\").concat(featureIndex, \".\").concat(index, \".\").concat(editHandleType); // first <circle|rect> is to make path easily interacted with\n\n      switch (shape) {\n        case 'circle':\n          return /*#__PURE__*/React.createElement(\"g\", {\n            key: elemKey,\n            transform: \"translate(\".concat(p[0], \", \").concat(p[1], \")\")\n          }, /*#__PURE__*/React.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.EDIT_HANDLE,\n            \"data-index\": index,\n            \"data-feature-index\": featureIndex,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, {\n              stroke: 'none',\n              fill: '#000',\n              fillOpacity: 0\n            }),\n            cx: 0,\n            cy: 0,\n            r: clickRadius\n          }), /*#__PURE__*/React.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.EDIT_HANDLE,\n            \"data-index\": index,\n            \"data-feature-index\": featureIndex,\n            key: elemKey,\n            style: style,\n            cx: 0,\n            cy: 0\n          }));\n\n        case 'rect':\n          return /*#__PURE__*/React.createElement(\"g\", {\n            key: elemKey,\n            transform: \"translate(\".concat(p[0], \", \").concat(p[1], \")\")\n          }, /*#__PURE__*/React.createElement(\"rect\", {\n            \"data-type\": _constants.ELEMENT_TYPE.EDIT_HANDLE,\n            \"data-index\": index,\n            \"data-feature-index\": featureIndex,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, {\n              height: clickRadius,\n              width: clickRadius,\n              fill: '#000',\n              fillOpacity: 0\n            }),\n            r: clickRadius\n          }), /*#__PURE__*/React.createElement(\"rect\", {\n            \"data-type\": _constants.ELEMENT_TYPE.EDIT_HANDLE,\n            \"data-index\": index,\n            \"data-feature-index\": featureIndex,\n            key: \"\".concat(elemKey),\n            style: style\n          }));\n\n        default:\n          return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSegment\", function (featureIndex, index, coordinates, style) {\n      var path = _this._getPathInScreenCoords(coordinates, _constants.GEOJSON_TYPE.LINE_STRING);\n\n      var radius = style.radius,\n          others = _objectWithoutProperties(style, [\"radius\"]);\n\n      var clickRadius = _this.props.clickRadius;\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.SEGMENT, \".\").concat(featureIndex, \".\").concat(index);\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: elemKey\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        key: \"\".concat(elemKey, \".hidden\"),\n        \"data-type\": _constants.ELEMENT_TYPE.SEGMENT,\n        \"data-index\": index,\n        \"data-feature-index\": featureIndex,\n        style: _objectSpread({}, others, {\n          stroke: 'rgba(0,0,0,0)',\n          strokeWidth: clickRadius || radius,\n          opacity: 0\n        }),\n        d: path\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        key: elemKey,\n        \"data-type\": _constants.ELEMENT_TYPE.SEGMENT,\n        \"data-index\": index,\n        \"data-feature-index\": featureIndex,\n        style: others,\n        d: path\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSegments\", function (featureIndex, coordinates, style) {\n      var segments = [];\n\n      for (var i = 0; i < coordinates.length - 1; i++) {\n        segments.push(_this._renderSegment(featureIndex, i, [coordinates[i], coordinates[i + 1]], style));\n      }\n\n      return segments;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderFill\", function (featureIndex, coordinates, style) {\n      var path = _this._getPathInScreenCoords(coordinates, _constants.GEOJSON_TYPE.POLYGON);\n\n      return /*#__PURE__*/React.createElement(\"path\", {\n        key: \"\".concat(_constants.ELEMENT_TYPE.FILL, \".\").concat(featureIndex),\n        \"data-type\": _constants.ELEMENT_TYPE.FILL,\n        \"data-feature-index\": featureIndex,\n        style: _objectSpread({}, style, {\n          stroke: 'none'\n        }),\n        d: path\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderTentativeFeature\", function (feature, cursorEditHandle) {\n      var featureStyle = _this.props.featureStyle;\n      var geojsonType = feature.geometry.type,\n          shape = feature.properties.shape;\n      var coordinates = (0, _utils.getFeatureCoordinates)(feature);\n\n      if (!coordinates || !Array.isArray(coordinates) || coordinates.length < 2) {\n        return null;\n      } // >= 2 coordinates\n\n\n      var firstCoords = coordinates[0];\n      var lastCoords = coordinates[coordinates.length - 1];\n\n      var uncommittedStyle = _this._getStyleProp(featureStyle, {\n        feature: feature,\n        index: null,\n        state: _constants.RENDER_STATE.UNCOMMITTED\n      });\n\n      var committedPath;\n      var uncommittedPath;\n      var closingPath; // @ts-ignore\n\n      var fill = _this._renderFill('tentative', coordinates, uncommittedStyle);\n\n      var type = shape || geojsonType;\n\n      switch (type) {\n        case _constants.SHAPE.LINE_STRING:\n        case _constants.SHAPE.POLYGON:\n          var committedStyle = _this._getStyleProp(featureStyle, {\n            feature: feature,\n            state: _constants.RENDER_STATE.SELECTED\n          });\n\n          if (cursorEditHandle) {\n            // @ts-ignore\n            var cursorCoords = coordinates[coordinates.length - 2];\n            committedPath = _this._renderSegments('tentative', // @ts-ignore\n            coordinates.slice(0, coordinates.length - 1), committedStyle);\n            uncommittedPath = _this._renderSegment('tentative-uncommitted', // @ts-ignore\n            coordinates.length - 2, // @ts-ignore\n            [cursorCoords, lastCoords], uncommittedStyle);\n          } else {\n            // @ts-ignore\n            committedPath = _this._renderSegments('tentative', coordinates, committedStyle);\n          }\n\n          if (shape === _constants.SHAPE.POLYGON) {\n            var closingStyle = _this._getStyleProp(featureStyle, {\n              feature: feature,\n              index: null,\n              state: _constants.RENDER_STATE.CLOSING\n            });\n\n            closingPath = _this._renderSegment('tentative-closing', // @ts-ignore\n            coordinates.length - 1, // @ts-ignore\n            [lastCoords, firstCoords], closingStyle);\n          }\n\n          break;\n\n        case _constants.SHAPE.RECTANGLE:\n          uncommittedPath = _this._renderSegments('tentative', // @ts-ignore\n          [].concat(_toConsumableArray(coordinates), [firstCoords]), uncommittedStyle);\n          break;\n\n        default:\n      }\n\n      return [fill, committedPath, uncommittedPath, closingPath].filter(Boolean);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderGuides\", function (guideFeatures) {\n      var features = _this.getFeatures();\n\n      var cursorEditHandle = guideFeatures && guideFeatures.find(function (f) {\n        return f.properties.guideType === _constants.GUIDE_TYPE.CURSOR_EDIT_HANDLE;\n      });\n      var tentativeFeature = features.find(function (f) {\n        return f.properties.guideType === _constants.GUIDE_TYPE.TENTATIVE;\n      });\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: \"feature-guides\"\n      }, guideFeatures.map(function (guide) {\n        var guideType = guide.properties.guideType;\n\n        switch (guideType) {\n          case _constants.GUIDE_TYPE.TENTATIVE:\n            return _this._renderTentativeFeature(guide, cursorEditHandle);\n\n          case _constants.GUIDE_TYPE.EDIT_HANDLE:\n          case _constants.GUIDE_TYPE.CURSOR_EDIT_HANDLE:\n            var shape = guide.properties.shape || guide.geometry.type; // TODO this should be removed when fix editing mode\n            // don't render cursor for rectangle\n\n            if (shape === _constants.SHAPE.RECTANGLE && guide.properties.editHandleType === 'intermediate') {\n              return null;\n            }\n\n            var feature = features && features[guide.properties.featureIndex] || tentativeFeature;\n            return _this._renderEditHandle(guide, feature);\n\n          default:\n            return null;\n        }\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderPoint\", function (feature, index, path) {\n      // @ts-ignore\n      var renderState = _this._getFeatureRenderState(index);\n\n      var _this$props2 = _this.props,\n          featureStyle = _this$props2.featureStyle,\n          featureShape = _this$props2.featureShape,\n          clickRadius = _this$props2.clickRadius;\n\n      var shape = _this._getStyleProp(featureShape, {\n        feature: feature,\n        index: index,\n        state: renderState\n      });\n\n      var style = _this._getStyleProp(featureStyle, {\n        feature: feature,\n        index: index,\n        state: renderState\n      });\n\n      var elemKey = \"feature.\".concat(index);\n\n      if (shape === 'rect') {\n        return /*#__PURE__*/React.createElement(\"g\", {\n          key: elemKey,\n          transform: \"translate(\".concat(path[0][0], \", \").concat(path[0][1], \")\")\n        }, /*#__PURE__*/React.createElement(\"rect\", {\n          \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n          \"data-feature-index\": index,\n          key: \"\".concat(elemKey, \".hidden\"),\n          style: _objectSpread({}, style, {\n            width: clickRadius,\n            height: clickRadius,\n            fill: '#000',\n            fillOpacity: 0\n          })\n        }), /*#__PURE__*/React.createElement(\"rect\", {\n          \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n          \"data-feature-index\": index,\n          key: elemKey,\n          style: style\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: \"feature.\".concat(index),\n        transform: \"translate(\".concat(path[0][0], \", \").concat(path[0][1], \")\")\n      }, /*#__PURE__*/React.createElement(\"circle\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: \"\".concat(elemKey, \".hidden\"),\n        style: _objectSpread({}, style, {\n          opacity: 0\n        }),\n        cx: 0,\n        cy: 0,\n        r: clickRadius\n      }), /*#__PURE__*/React.createElement(\"circle\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: elemKey,\n        style: style,\n        cx: 0,\n        cy: 0\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderPath\", function (feature, index, path) {\n      var _this$props3 = _this.props,\n          featureStyle = _this$props3.featureStyle,\n          clickRadius = _this$props3.clickRadius;\n\n      var selectedFeatureIndex = _this._getSelectedFeatureIndex();\n\n      var selected = index === selectedFeatureIndex; // @ts-ignore\n\n      var renderState = _this._getFeatureRenderState(index);\n\n      var style = _this._getStyleProp(featureStyle, {\n        feature: feature,\n        index: index,\n        state: renderState\n      });\n\n      var elemKey = \"feature.\".concat(index);\n\n      if (selected) {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(\"g\", {\n            key: elemKey\n          }, _this._renderSegments(index, feature.geometry.coordinates, style))\n        );\n      } // first <path> is to make path easily interacted with\n\n\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: elemKey\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: \"\".concat(elemKey, \".hidden\"),\n        style: _objectSpread({}, style, {\n          stroke: 'rgba(0,0,0,0)',\n          strokeWidth: clickRadius,\n          opacity: 0\n        }),\n        d: path\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: elemKey,\n        style: style,\n        d: path\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderPolygon\", function (feature, index, path) {\n      var featureStyle = _this.props.featureStyle;\n\n      var selectedFeatureIndex = _this._getSelectedFeatureIndex();\n\n      var selected = index === selectedFeatureIndex; // @ts-ignore\n\n      var renderState = _this._getFeatureRenderState(index);\n\n      var style = _this._getStyleProp(featureStyle, {\n        feature: feature,\n        index: index,\n        state: renderState\n      });\n\n      var elemKey = \"feature.\".concat(index);\n\n      if (selected) {\n        var coordinates = (0, _utils.getFeatureCoordinates)(feature);\n\n        if (!coordinates) {\n          return null;\n        }\n\n        return /*#__PURE__*/React.createElement(\"g\", {\n          key: elemKey\n        }, // eslint-disable-next-line prettier/prettier\n        //@ts-ignore\n        _this._renderFill(index, coordinates, style), // eslint-disable-next-line prettier/prettier\n        // @ts-ignore\n        _this._renderSegments(index, coordinates, style));\n      }\n\n      return /*#__PURE__*/React.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: elemKey,\n        style: style,\n        d: path\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderFeature\", function (feature, index) {\n      var coordinates = (0, _utils.getFeatureCoordinates)(feature); // @ts-ignore\n\n      if (!coordinates || !coordinates.length) {\n        return null;\n      }\n\n      var shape = feature.properties.shape,\n          geojsonType = feature.geometry.type; // @ts-ignore\n\n      var path = _this._getPathInScreenCoords(coordinates, geojsonType);\n\n      if (!path) {\n        return null;\n      }\n\n      var type = shape || geojsonType;\n\n      switch (type) {\n        case _constants.SHAPE.POINT:\n          return _this._renderPoint(feature, index, path);\n\n        case _constants.SHAPE.LINE_STRING:\n          return _this._renderPath(feature, index, path);\n\n        case _constants.SHAPE.CIRCLE:\n        case _constants.SHAPE.POLYGON:\n        case _constants.SHAPE.RECTANGLE:\n          return _this._renderPolygon(feature, index, path);\n\n        default:\n          return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderCanvas\", function () {\n      var features = _this.getFeatures();\n\n      var guides = _this._modeHandler && _this._modeHandler.getGuides(_this.getModeProps());\n\n      var guideFeatures = guides && guides.features;\n      return /*#__PURE__*/React.createElement(\"svg\", {\n        key: \"draw-canvas\",\n        width: \"100%\",\n        height: \"100%\"\n      }, features && features.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n        key: \"feature-group\"\n      }, features.map(_this._renderFeature)), guideFeatures && guideFeatures.length > 0 && /*#__PURE__*/React.createElement(\"g\", {\n        key: \"feature-guides\"\n      }, _this._renderGuides(guideFeatures)));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_render\", function () {\n      var viewport = _this._context && _this._context.viewport || {};\n      var style = _this.props.style; // @ts-ignore\n\n      var _viewport$width = viewport.width,\n          width = _viewport$width === void 0 ? 0 : _viewport$width,\n          _viewport$height = viewport.height,\n          height = _viewport$height === void 0 ? 0 : _viewport$height;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"editor\",\n        style: _objectSpread({\n          width: width,\n          height: height\n        }, style),\n        ref: function ref(_) {\n          _this._containerRef = _;\n        }\n      }, _this._renderCanvas());\n    });\n\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"_getPathInScreenCoords\",\n\n    /* HELPERS */\n    value: function _getPathInScreenCoords(coordinates, type) {\n      var _this2 = this;\n\n      if (coordinates.length === 0) {\n        return '';\n      }\n\n      var screenCoords = coordinates.map(function (p) {\n        return _this2.project(p);\n      });\n      var pathString = '';\n\n      switch (type) {\n        case _constants.GEOJSON_TYPE.POINT:\n          return screenCoords;\n\n        case _constants.GEOJSON_TYPE.LINE_STRING:\n          pathString = screenCoords.map(function (p) {\n            return \"\".concat(p[0], \",\").concat(p[1]);\n          }).join('L');\n          return \"M \".concat(pathString);\n\n        case _constants.GEOJSON_TYPE.POLYGON:\n          pathString = screenCoords.map(function (p) {\n            return \"\".concat(p[0], \",\").concat(p[1]);\n          }).join('L');\n          return \"M \".concat(pathString, \" z\");\n\n        default:\n          return null;\n      }\n    }\n  }]);\n\n  return Editor;\n}(_modeHandler[\"default\"]);\n\nexports[\"default\"] = Editor;\n\n_defineProperty(Editor, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["../src/editor.tsx"],"names":["defaultProps","ModeHandler","clickRadius","featureShape","editHandleShape","editHandleStyle","defaultEditHandleStyle","featureStyle","defaultFeatureStyle","featuresDraggable","Editor","coordinates","type","screenCoords","pathString","GEOJSON_TYPE","p","pointerDownPicks","hovered","editHandleIndex","editHandle","draggingEditHandleIndex","pickedObject","GUIDE_TYPE","RENDER_STATE","ELEMENT_TYPE","selectedFeatureIndex","index","styleProp","featureIndex","positionIndexes","editHandleType","shape","feature","state","style","pointerEvents","elemKey","stroke","fill","fillOpacity","height","width","path","radius","others","strokeWidth","opacity","segments","i","geojsonType","Array","firstCoords","lastCoords","uncommittedStyle","UNCOMMITTED","SHAPE","committedStyle","SELECTED","cursorCoords","committedPath","uncommittedPath","closingStyle","CLOSING","closingPath","features","cursorEditHandle","guideFeatures","f","tentativeFeature","guideType","guide","renderState","selected","guides","viewport"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { Feature } from '@nebula.gl/edit-modes';\nimport { GeoJsonType, RenderState, Id } from './types';\n\nimport { RENDER_STATE, SHAPE, GEOJSON_TYPE, GUIDE_TYPE, ELEMENT_TYPE } from './constants';\nimport ModeHandler from './mode-handler';\nimport { getFeatureCoordinates } from './edit-modes/utils';\n\nimport {\n  editHandleStyle as defaultEditHandleStyle,\n  featureStyle as defaultFeatureStyle,\n} from './style';\n\nconst defaultProps = {\n  ...ModeHandler.defaultProps,\n  clickRadius: 0,\n  featureShape: 'circle',\n  editHandleShape: 'rect',\n  editHandleStyle: defaultEditHandleStyle,\n  featureStyle: defaultFeatureStyle,\n  featuresDraggable: true,\n};\n\nexport default class Editor extends ModeHandler {\n  static defaultProps = defaultProps;\n\n  /* HELPERS */\n  _getPathInScreenCoords(coordinates: any, type: GeoJsonType) {\n    if (coordinates.length === 0) {\n      return '';\n    }\n\n    const screenCoords = coordinates.map((p) => this.project(p));\n\n    let pathString = '';\n    switch (type) {\n      case GEOJSON_TYPE.POINT:\n        return screenCoords;\n\n      case GEOJSON_TYPE.LINE_STRING:\n        pathString = screenCoords.map((p) => `${p[0]},${p[1]}`).join('L');\n        return `M ${pathString}`;\n\n      case GEOJSON_TYPE.POLYGON:\n        pathString = screenCoords.map((p) => `${p[0]},${p[1]}`).join('L');\n        return `M ${pathString} z`;\n\n      default:\n        return null;\n    }\n  }\n\n  _getEditHandleState = (editHandle: Feature, renderState: string | null | undefined) => {\n    const { pointerDownPicks, hovered } = this.state;\n\n    if (renderState) {\n      return renderState;\n    }\n\n    const editHandleIndex = editHandle.properties.positionIndexes[0];\n    let draggingEditHandleIndex = null;\n    const pickedObject = pointerDownPicks && pointerDownPicks[0] && pointerDownPicks[0].object;\n    if (pickedObject && pickedObject.guideType === GUIDE_TYPE.EDIT_HANDLE) {\n      draggingEditHandleIndex = pickedObject.index;\n    }\n\n    if (\n      editHandleIndex === draggingEditHandleIndex ||\n      this.state.selectedEditHandleIndexes.includes(editHandleIndex)\n    ) {\n      return RENDER_STATE.SELECTED;\n    }\n    // @ts-ignore\n    if (hovered && hovered.type === ELEMENT_TYPE.EDIT_HANDLE) {\n      if (hovered.index === editHandleIndex) {\n        return RENDER_STATE.HOVERED;\n      }\n\n      // cursor hovered on first vertex when drawing polygon\n      if (\n        hovered.index === 0 &&\n        editHandle.properties.guideType === GUIDE_TYPE.CURSOR_EDIT_HANDLE\n      ) {\n        return RENDER_STATE.CLOSING;\n      }\n    }\n\n    return RENDER_STATE.INACTIVE;\n  };\n\n  _getFeatureRenderState = (index: number, renderState: RenderState | null | undefined) => {\n    const { hovered } = this.state;\n    const selectedFeatureIndex = this._getSelectedFeatureIndex();\n    if (renderState) {\n      return renderState;\n    }\n\n    if (index === selectedFeatureIndex) {\n      return RENDER_STATE.SELECTED;\n    }\n    // @ts-ignore\n    if (hovered && hovered.type === ELEMENT_TYPE.FEATURE && hovered.featureIndex === index) {\n      return RENDER_STATE.HOVERED;\n    }\n\n    return RENDER_STATE.INACTIVE;\n  };\n\n  _getStyleProp = (styleProp: any, params: any) => {\n    return typeof styleProp === 'function' ? styleProp(params) : styleProp;\n  };\n\n  /* RENDER */\n\n  /* eslint-disable max-params */\n  _renderEditHandle = (editHandle: Feature, feature: Feature) => {\n    /* eslint-enable max-params */\n    const coordinates = getFeatureCoordinates(editHandle);\n    const p = this.project(coordinates && coordinates[0]);\n    if (!p) {\n      return null;\n    }\n\n    const {\n      properties: { featureIndex, positionIndexes, editHandleType },\n    } = editHandle;\n    const { clickRadius, editHandleShape, editHandleStyle } = this.props;\n\n    const index = positionIndexes.length > 1 ? positionIndexes[1] : positionIndexes[0];\n\n    const shape = this._getStyleProp(editHandleShape, {\n      feature: feature || editHandle,\n      index,\n      featureIndex,\n      // @ts-ignore\n      state: this._getEditHandleState(editHandle),\n    });\n\n    let style = this._getStyleProp(editHandleStyle, {\n      feature: feature || editHandle,\n      index,\n      featureIndex,\n      shape,\n      // @ts-ignore\n      state: this._getEditHandleState(editHandle),\n    });\n\n    // disable events for cursor editHandle\n    if (editHandle.properties.guideType === GUIDE_TYPE.CURSOR_EDIT_HANDLE) {\n      style = {\n        ...style,\n        // disable pointer events for cursor\n        pointerEvents: 'none',\n      };\n    }\n\n    const elemKey = `${ELEMENT_TYPE.EDIT_HANDLE}.${featureIndex}.${index}.${editHandleType}`;\n    // first <circle|rect> is to make path easily interacted with\n    switch (shape) {\n      case 'circle':\n        return (\n          <g key={elemKey} transform={`translate(${p[0]}, ${p[1]})`}>\n            <circle\n              data-type={ELEMENT_TYPE.EDIT_HANDLE}\n              data-index={index}\n              data-feature-index={featureIndex}\n              key={`${elemKey}.hidden`}\n              style={{ ...style, stroke: 'none', fill: '#000', fillOpacity: 0 }}\n              cx={0}\n              cy={0}\n              r={clickRadius}\n            />\n            <circle\n              data-type={ELEMENT_TYPE.EDIT_HANDLE}\n              data-index={index}\n              data-feature-index={featureIndex}\n              key={elemKey}\n              style={style}\n              cx={0}\n              cy={0}\n            />\n          </g>\n        );\n      case 'rect':\n        return (\n          <g key={elemKey} transform={`translate(${p[0]}, ${p[1]})`}>\n            <rect\n              data-type={ELEMENT_TYPE.EDIT_HANDLE}\n              data-index={index}\n              data-feature-index={featureIndex}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                height: clickRadius,\n                width: clickRadius,\n                fill: '#000',\n                fillOpacity: 0,\n              }}\n              r={clickRadius}\n            />\n            <rect\n              data-type={ELEMENT_TYPE.EDIT_HANDLE}\n              data-index={index}\n              data-feature-index={featureIndex}\n              key={`${elemKey}`}\n              style={style}\n            />\n          </g>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  _renderSegment = (\n    featureIndex: Id,\n    index: number,\n    coordinates: number[],\n    style: Record<string, any>\n  ) => {\n    const path = this._getPathInScreenCoords(coordinates, GEOJSON_TYPE.LINE_STRING);\n    const { radius, ...others } = style;\n    const { clickRadius } = this.props;\n\n    const elemKey = `${ELEMENT_TYPE.SEGMENT}.${featureIndex}.${index}`;\n    return (\n      <g key={elemKey}>\n        <path\n          key={`${elemKey}.hidden`}\n          data-type={ELEMENT_TYPE.SEGMENT}\n          data-index={index}\n          data-feature-index={featureIndex}\n          style={{\n            ...others,\n            stroke: 'rgba(0,0,0,0)',\n            strokeWidth: clickRadius || radius,\n            opacity: 0,\n          }}\n          d={path}\n        />\n        <path\n          key={elemKey}\n          data-type={ELEMENT_TYPE.SEGMENT}\n          data-index={index}\n          data-feature-index={featureIndex}\n          style={others}\n          d={path}\n        />\n      </g>\n    );\n  };\n\n  _renderSegments = (featureIndex: Id, coordinates: number[], style: Record<string, any>) => {\n    const segments = [];\n    for (let i = 0; i < coordinates.length - 1; i++) {\n      segments.push(\n        this._renderSegment(featureIndex, i, [coordinates[i], coordinates[i + 1]], style)\n      );\n    }\n    return segments;\n  };\n\n  _renderFill = (featureIndex: Id, coordinates: number[], style: Record<string, any>) => {\n    const path = this._getPathInScreenCoords(coordinates, GEOJSON_TYPE.POLYGON);\n    return (\n      <path\n        key={`${ELEMENT_TYPE.FILL}.${featureIndex}`}\n        data-type={ELEMENT_TYPE.FILL}\n        data-feature-index={featureIndex}\n        style={{ ...style, stroke: 'none' }}\n        d={path}\n      />\n    );\n  };\n\n  _renderTentativeFeature = (feature: Feature, cursorEditHandle: Feature) => {\n    const { featureStyle } = this.props;\n    const {\n      geometry: { type: geojsonType },\n      properties: { shape },\n    } = feature;\n\n    const coordinates = getFeatureCoordinates(feature);\n    if (!coordinates || !Array.isArray(coordinates) || coordinates.length < 2) {\n      return null;\n    }\n\n    // >= 2 coordinates\n    const firstCoords = coordinates[0];\n    const lastCoords = coordinates[coordinates.length - 1];\n    const uncommittedStyle = this._getStyleProp(featureStyle, {\n      feature,\n      index: null,\n      state: RENDER_STATE.UNCOMMITTED,\n    });\n\n    let committedPath;\n    let uncommittedPath;\n    let closingPath;\n    // @ts-ignore\n    const fill = this._renderFill('tentative', coordinates, uncommittedStyle);\n\n    const type = shape || geojsonType;\n    switch (type) {\n      case SHAPE.LINE_STRING:\n      case SHAPE.POLYGON:\n        const committedStyle = this._getStyleProp(featureStyle, {\n          feature,\n          state: RENDER_STATE.SELECTED,\n        });\n\n        if (cursorEditHandle) {\n          // @ts-ignore\n          const cursorCoords = coordinates[coordinates.length - 2];\n          committedPath = this._renderSegments(\n            'tentative',\n            // @ts-ignore\n            coordinates.slice(0, coordinates.length - 1),\n            committedStyle\n          );\n          uncommittedPath = this._renderSegment(\n            'tentative-uncommitted',\n            // @ts-ignore\n            coordinates.length - 2,\n            // @ts-ignore\n            [cursorCoords, lastCoords],\n            uncommittedStyle\n          );\n        } else {\n          // @ts-ignore\n          committedPath = this._renderSegments('tentative', coordinates, committedStyle);\n        }\n\n        if (shape === SHAPE.POLYGON) {\n          const closingStyle = this._getStyleProp(featureStyle, {\n            feature,\n            index: null,\n            state: RENDER_STATE.CLOSING,\n          });\n\n          closingPath = this._renderSegment(\n            'tentative-closing',\n            // @ts-ignore\n            coordinates.length - 1,\n            // @ts-ignore\n            [lastCoords, firstCoords],\n            closingStyle\n          );\n        }\n\n        break;\n\n      case SHAPE.RECTANGLE:\n        uncommittedPath = this._renderSegments(\n          'tentative',\n          // @ts-ignore\n          [...coordinates, firstCoords],\n          uncommittedStyle\n        );\n        break;\n\n      default:\n    }\n\n    return [fill, committedPath, uncommittedPath, closingPath].filter(Boolean);\n  };\n\n  _renderGuides = (guideFeatures: Feature[]) => {\n    const features = this.getFeatures();\n    const cursorEditHandle =\n      guideFeatures &&\n      guideFeatures.find((f) => f.properties.guideType === GUIDE_TYPE.CURSOR_EDIT_HANDLE);\n    const tentativeFeature = features.find((f) => f.properties.guideType === GUIDE_TYPE.TENTATIVE);\n\n    return (\n      <g key=\"feature-guides\">\n        {guideFeatures.map((guide) => {\n          const guideType = guide.properties.guideType;\n          switch (guideType) {\n            case GUIDE_TYPE.TENTATIVE:\n              return this._renderTentativeFeature(guide, cursorEditHandle);\n            case GUIDE_TYPE.EDIT_HANDLE:\n            case GUIDE_TYPE.CURSOR_EDIT_HANDLE:\n              const shape = guide.properties.shape || guide.geometry.type;\n              // TODO this should be removed when fix editing mode\n              // don't render cursor for rectangle\n              if (shape === SHAPE.RECTANGLE && guide.properties.editHandleType === 'intermediate') {\n                return null;\n              }\n              const feature =\n                (features && features[guide.properties.featureIndex]) || tentativeFeature;\n              return this._renderEditHandle(guide, feature);\n            default:\n              return null;\n          }\n        })}\n      </g>\n    );\n  };\n\n  _renderPoint = (feature: Feature, index: number, path: string) => {\n    // @ts-ignore\n    const renderState = this._getFeatureRenderState(index);\n    const { featureStyle, featureShape, clickRadius } = this.props;\n    const shape = this._getStyleProp(featureShape, { feature, index, state: renderState });\n    const style = this._getStyleProp(featureStyle, { feature, index, state: renderState });\n\n    const elemKey = `feature.${index}`;\n    if (shape === 'rect') {\n      return (\n        <g key={elemKey} transform={`translate(${path[0][0]}, ${path[0][1]})`}>\n          <rect\n            data-type={ELEMENT_TYPE.FEATURE}\n            data-feature-index={index}\n            key={`${elemKey}.hidden`}\n            style={{\n              ...style,\n              width: clickRadius,\n              height: clickRadius,\n              fill: '#000',\n              fillOpacity: 0,\n            }}\n          />\n          <rect\n            data-type={ELEMENT_TYPE.FEATURE}\n            data-feature-index={index}\n            key={elemKey}\n            style={style}\n          />\n        </g>\n      );\n    }\n\n    return (\n      <g key={`feature.${index}`} transform={`translate(${path[0][0]}, ${path[0][1]})`}>\n        <circle\n          data-type={ELEMENT_TYPE.FEATURE}\n          data-feature-index={index}\n          key={`${elemKey}.hidden`}\n          style={{\n            ...style,\n            opacity: 0,\n          }}\n          cx={0}\n          cy={0}\n          r={clickRadius}\n        />\n        <circle\n          data-type={ELEMENT_TYPE.FEATURE}\n          data-feature-index={index}\n          key={elemKey}\n          style={style}\n          cx={0}\n          cy={0}\n        />\n      </g>\n    );\n  };\n\n  _renderPath = (feature: Feature, index: number, path: string) => {\n    const { featureStyle, clickRadius } = this.props;\n    const selectedFeatureIndex = this._getSelectedFeatureIndex();\n    const selected = index === selectedFeatureIndex;\n    // @ts-ignore\n    const renderState = this._getFeatureRenderState(index);\n    const style = this._getStyleProp(featureStyle, { feature, index, state: renderState });\n\n    const elemKey = `feature.${index}`;\n    if (selected) {\n      return (\n        // @ts-ignore\n        <g key={elemKey}>{this._renderSegments(index, feature.geometry.coordinates, style)}</g>\n      );\n    }\n\n    // first <path> is to make path easily interacted with\n    return (\n      <g key={elemKey}>\n        <path\n          data-type={ELEMENT_TYPE.FEATURE}\n          data-feature-index={index}\n          key={`${elemKey}.hidden`}\n          style={{\n            ...style,\n            stroke: 'rgba(0,0,0,0)',\n            strokeWidth: clickRadius,\n            opacity: 0,\n          }}\n          d={path}\n        />\n        <path\n          data-type={ELEMENT_TYPE.FEATURE}\n          data-feature-index={index}\n          key={elemKey}\n          style={style}\n          d={path}\n        />\n      </g>\n    );\n  };\n\n  _renderPolygon = (feature: Feature, index: number, path: string) => {\n    const { featureStyle } = this.props;\n    const selectedFeatureIndex = this._getSelectedFeatureIndex();\n    const selected = index === selectedFeatureIndex;\n    // @ts-ignore\n    const renderState = this._getFeatureRenderState(index);\n    const style = this._getStyleProp(featureStyle, { feature, index, state: renderState });\n\n    const elemKey = `feature.${index}`;\n    if (selected) {\n      const coordinates = getFeatureCoordinates(feature);\n      if (!coordinates) {\n        return null;\n      }\n      return (\n        <g key={elemKey}>\n          {// eslint-disable-next-line prettier/prettier\n          //@ts-ignore\n          this._renderFill(index, coordinates, style)}\n          {// eslint-disable-next-line prettier/prettier\n          // @ts-ignore\n          this._renderSegments(index, coordinates, style)}\n        </g>\n      );\n    }\n\n    return (\n      <path\n        data-type={ELEMENT_TYPE.FEATURE}\n        data-feature-index={index}\n        key={elemKey}\n        style={style}\n        d={path}\n      />\n    );\n  };\n\n  _renderFeature = (feature: Feature, index: number) => {\n    const coordinates = getFeatureCoordinates(feature);\n    // @ts-ignore\n    if (!coordinates || !coordinates.length) {\n      return null;\n    }\n    const {\n      properties: { shape },\n      geometry: { type: geojsonType },\n    } = feature;\n    // @ts-ignore\n    const path = this._getPathInScreenCoords(coordinates, geojsonType);\n    if (!path) {\n      return null;\n    }\n\n    const type = shape || geojsonType;\n    switch (type) {\n      case SHAPE.POINT:\n        return this._renderPoint(feature, index, path);\n      case SHAPE.LINE_STRING:\n        return this._renderPath(feature, index, path);\n\n      case SHAPE.CIRCLE:\n      case SHAPE.POLYGON:\n      case SHAPE.RECTANGLE:\n        return this._renderPolygon(feature, index, path);\n\n      default:\n        return null;\n    }\n  };\n\n  _renderCanvas = () => {\n    const features = this.getFeatures();\n    const guides = this._modeHandler && this._modeHandler.getGuides(this.getModeProps());\n    const guideFeatures = guides && guides.features;\n\n    return (\n      <svg key=\"draw-canvas\" width=\"100%\" height=\"100%\">\n        {features && features.length > 0 && (\n          <g key=\"feature-group\">{features.map(this._renderFeature)}</g>\n        )}\n        {guideFeatures && guideFeatures.length > 0 && (\n          <g key=\"feature-guides\">{this._renderGuides(guideFeatures)}</g>\n        )}\n      </svg>\n    );\n  };\n\n  _render = () => {\n    const viewport = (this._context && this._context.viewport) || {};\n    const { style } = this.props;\n    // @ts-ignore\n    const { width = 0, height = 0 } = viewport;\n    return (\n      <div\n        id=\"editor\"\n        style={{\n          width,\n          height,\n          ...style,\n        }}\n        ref={(_) => {\n          this._containerRef = _;\n        }}\n      >\n        {this._renderCanvas()}\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"script"}