[{"E:\\Code\\map\\katsu\\my-app\\src\\index.js":"1","E:\\Code\\map\\katsu\\my-app\\src\\reportWebVitals.js":"2","E:\\Code\\map\\katsu\\my-app\\src\\App.js":"3","E:\\Code\\map\\katsu\\my-app\\src\\pins.js":"4","E:\\Code\\map\\katsu\\my-app\\src\\city-info.js":"5","E:\\Code\\map\\katsu\\my-app\\src\\style.js":"6","E:\\Code\\map\\katsu\\my-app\\src\\control-panel-draw.js":"7"},{"size":500,"mtime":1616998112345,"results":"8","hashOfConfig":"9"},{"size":364,"mtime":1616998112368,"results":"10","hashOfConfig":"9"},{"size":4097,"mtime":1617010551332,"results":"11","hashOfConfig":"9"},{"size":1041,"mtime":1616998112360,"results":"12","hashOfConfig":"9"},{"size":439,"mtime":1616998112274,"results":"13","hashOfConfig":"9"},{"size":1115,"mtime":1617005445855,"results":"14","hashOfConfig":"9"},{"size":673,"mtime":1617003160445,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1m8ku34",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"E:\\Code\\map\\katsu\\my-app\\src\\index.js",[],["33","34"],"E:\\Code\\map\\katsu\\my-app\\src\\reportWebVitals.js",[],"E:\\Code\\map\\katsu\\my-app\\src\\App.js",["35"],"import * as React from \"react\";\nimport { useState, useRef, useCallback } from \"react\";\nimport ReactMapGL, {\n  AttributionControl,\n  FullscreenControl,\n  GeolocateControl,\n  ScaleControl,\n  Popup,\n  NavigationControl,\n} from \"react-map-gl\";\nimport Pins from \"./pins.js\";\nimport CityInfo from \"./city-info.js\";\nimport CITIES from \"./data/cities.json\";\nimport {Editor, DrawLineStringMode, EditingMode} from 'react-map-gl-draw';\nimport {getFeatureStyle, getEditHandleStyle} from './style.js';\n//import ControlPanel from './control-panel-draw.js';\n\n\n\nconst TOKEN =\n  \"pk.eyJ1Ijoia2F0c3UxIiwiYSI6ImNrbWxudzNsaTFjb2gyb3Frc2puNWp2YWsifQ.huIA73MzdpMzWEKOUFBFcQ\";\n\nconst attributionStyle = {\n  right: 0,\n  bottom: 0,\n};\n\nconst fullscreenControlStyle = {\n  right: 10,\n  bottom: 50,\n};\n\nconst geolocateControlStyle = {\n  right: 10,\n  top: 10,\n};\n\nconst navControlStyle = {\n  right: 10,\n  top: 50,\n};\n\nconst scaleControlStyle = {\n  bottom: 36,\n  left: 0,\n  padding: \"10px\",\n};\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    width: \"100vw\",\n    height: \"100vh\",\n    latitude: 35.6895,\n    longitude: 139.69171,\n    // longitude: -122.45,\n    // latitude: 37.78,\n    //zoom: 8\n    zoom: 8,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  const [mode, setMode] = useState(null);\n  const [selectedFeatureIndex, setSelectedFeatureIndex] = useState(null);\n  const editorRef = useRef(null);\n\n  const onSelect = useCallback(options => {\n    setSelectedFeatureIndex(options && options.selectedFeatureIndex);\n  }, []);\n\n  const onDelete = useCallback(() => {\n    if (selectedFeatureIndex !== null && selectedFeatureIndex >= 0) {\n      editorRef.current.deleteFeatures(selectedFeatureIndex);\n    }\n  }, [selectedFeatureIndex]);\n\n  const onUpdate = useCallback(({editType}) => {\n    if (editType === 'addFeature') {\n      setMode(new EditingMode());\n    }\n  }, []);\n  const drawTools = (\n    <div className=\"mapboxgl-ctrl-top-left\">\n      <div className=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n        <button\n          className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_line\"\n          title=\"Polygon tool (p)\"\n          onClick={() => setMode(new DrawLineStringMode())}\n        />\n        <button\n          className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_trash\"\n          title=\"Delete\"\n          onClick={onDelete}\n        />\n      </div>\n    </div>\n  );\n\n  const features = editorRef.current && editorRef.current.getFeatures();\n  const selectedFeature =\n    features && (features[selectedFeatureIndex] || features[features.length - 1]);\n\n  return (\n    <>\n    <ReactMapGL\n      {...viewport}\n      maxZoom={15}\n      mapboxApiAccessToken={TOKEN}\n      mapStyle=\"mapbox://styles/katsu1/ckmmxp0ae1ikv17pn2hf0nv09\"\n      onViewportChange={(nextViewport) => setViewport(nextViewport)}\n      attributionControl={false}\n    >\n      <AttributionControl compact={true} style={attributionStyle} />\n      <FullscreenControl style={fullscreenControlStyle} />\n      <GeolocateControl\n        style={geolocateControlStyle}\n        positionOptions={{ enableHighAccuracy: true }}\n        trackUserLocation={true}\n        auto={false}\n      />\n      <NavigationControl style={navControlStyle} />\n      <ScaleControl style={scaleControlStyle} />\n      <Pins data={CITIES} onClick={setPopupInfo} />\n      {popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          longitude={popupInfo.longitude}\n          latitude={popupInfo.latitude}\n          closeOnClick={false}\n          onClose={setPopupInfo}\n        >\n          <CityInfo info={popupInfo} />\n        </Popup>\n      )}\n      <Editor\n          ref={editorRef}\n          style={{width: '100%', height: '100%'}}\n          clickRadius={12}\n          mode={mode}\n          onSelect={onSelect}\n          onUpdate={onUpdate}\n          editHandleShape={'circle'}\n          featureStyle={getFeatureStyle}\n          editHandleStyle={getEditHandleStyle}\n        />\n        {drawTools}\n    </ReactMapGL>\n    {/* <ControlPanel line={selectedFeature} /> */}\n    </>\n  );\n}\n\nexport default App;\n","E:\\Code\\map\\katsu\\my-app\\src\\pins.js",[],"E:\\Code\\map\\katsu\\my-app\\src\\city-info.js",[],"E:\\Code\\map\\katsu\\my-app\\src\\style.js",[],"E:\\Code\\map\\katsu\\my-app\\src\\control-panel-draw.js",[],["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":102,"column":9,"nodeType":"44","messageId":"45","endLine":102,"endColumn":24},{"ruleId":"38","replacedBy":"46"},{"ruleId":"40","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'selectedFeature' is assigned a value but never used.","Identifier","unusedVar",["48"],["49"],"no-global-assign","no-unsafe-negation"]